#!/usr/bin/perl
use strict;
use warnings;

my ($lambda, $maxi) = @ARGV;
die "usage: $0 lambda\n", if not defined $lambda;
$maxi = 30 if not defined $maxi;

my @cdf = ();

for my $i (0..$maxi) {
  $cdf[$i] = (1.0 - exp(-1.0*$lambda*$i))/(1.0 - exp(-1.0*$lambda*$maxi));
  printf "%d %0.5f\n", $i, $cdf[$i];
}
print "\n";

my $sum = 0;
my $sumsq = 0;
my $n = 10000;
for my $i (1..$n) {
  my $x = draw_cdf();
  $sum += $x;
  $sumsq += $x*$x;
}
my $mean = $sum / (1.0*$n);
my $std = sqrt(($n*$sumsq - $sum*$sum)/(1.0*$n*($n-1)));
print "$n $mean $std\n";

my $top = $maxi;
$top-- while ($cdf[$top] > 0.98);
$top++;
$cdf[$top] = 1.0;

$sum = 0;
$sumsq = 0;
$n = 10000;
for my $i (1..$n) {
  my $x = draw_cdf();
  $sum += $x;
  $sumsq += $x*$x;
}
$mean = $sum / (1.0*$n);
$std = sqrt(($n*$sumsq - $sum*$sum)/(1.0*$n*($n-1)));
print "$n $mean $std\n";


print $top+1;
for my $i (0..$top) {
  printf " %0.5f", $cdf[$i];
}
print "\n";

exit;

sub draw_cdf {
  my $r = rand();
  my $j = 0;
  $j++ while ($cdf[$j] < $r);
  return $j;
}

