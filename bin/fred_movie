#!/usr/bin/perl
use strict;
use warnings;
use Env;
use Getopt::Long qw(:config no_ignore_case bundling);
$| = 1;

my $FRED = $ENV{FRED_HOME};
die "$0: Please set environmental variable FRED_HOME to location of FRED home directory\n" if not $FRED;

my $FREDRESULTS = $ENV{FRED_RESULTS};
$FREDRESULTS = "$ENV{FRED_HOME}/RESULTS" if not $FREDRESULTS;

my $help = "";
my $type = "static";
my $key = "";
my $title = "FRED: Allegheny County Model";
my $variable = "C";
my $op = "sum";
my $movformat ="mov";
my $percents = "";
my $gaia = 0;
my $state = 0;
my $upper = 0;
my $agents = "";
my $opt_result = GetOptions(
			    "a" => \$agents,
			    "agents" => \$agents,
			    "help" => \$help,
			    "h" => \$help,
			    "t=s" => \$type,
			    "type=s" => \$type,
			    "k=s" => \$key,
			    "key=s" => \$key,
			    "s" => \$state,
			    "state" => \$state,
			    "T=s" => \$title,
			    "Title=s" => \$title,
			    "title=s" => \$title,
			    "v=s" => \$variable,
			    "variable=s" => \$variable,
			    "op=s" => \$op,
			    "o=s" => \$op,
			    "m=s" => \$movformat,
			    "movformat=s" => \$movformat,
			    "p" => \$percents,
			    "percents" => \$percents,
			    "g" => \$gaia,
			    "gaia" => \$gaia,
			    "upper=s" => \$upper,
			    "u=s" => \$upper,
);

my $usage = <<EOH;
usage: $0 [--help][-k key][-v variable][-o operation][-t vis_type][other options]
    -k or --key       Fred Key (no default)
    -v or --variable   The variable from FRED you would like to plot.
                       Available variables are actually determined by FRED but here are some
		       examples:
		       N - Populaton Density
		       C - Newly exposed persons
		       P - Prevalence
		       I - Number of people infectious
                       (default: C)
    -t or --type       Type of GAIA visualization
                       static = a static image
		       animated = a ogg movie of the visualization
                       (default: static)
    -o or --op         Operation to perform on the data (only for static)
                       sum = will sum up all of the data over days of simulation
		       max = will only take the maximum value for each grid over days of simulation
		       (Note if -v is set to N and -t is set to static, this is always max).
                       (default: sum)
    -m or --movformat  Format you would like the movie in (only for -t animated)
                       mov - produces quicktime movie
		       mp4 - produces mp4 movie
		       ogg - procudes ogg movie (default)
    -T or --title      Title for the visualization
    -p or --percents   If set, will plot the percentage of the value in each grid cell. (default: off) 
    -g or --gaia       If set, use GAIA. By default, use local R script.

EOH

die $usage if $help;

my $id = `$FRED/bin/fred_id $key`;
chomp $id;
die "$id\n" if $id =~ /^fred_id:/;
die "key is $id\n" if $id =~ /UNKNOWN/;

my $dir = "";
my $cmd = "";
my $filebase = "";
my $outfile = "";
my $pid = $$;
my $reportsdir = "$FREDRESULTS/JOB/$id/DATA/REPORTS";

if ($gaia) {
  $dir = $reportsdir;
  chdir  $dir or die "Can't chdir to $dir\n";
  $cmd = "$FRED/bin/pypy $FRED/bin/fred_gaia_inputs.py -k $key -v $variable -o $op -t $type -m $movformat -T '$title'";
  $filebase = "$type\_$key\_$variable\_$op";
  $filebase .= "_percents" if $percents;
  $cmd .= " -p" if $percents;
  print "$cmd\n";
  system "date > fred_movie.out-$pid";
  system "echo $cmd >> fred_movie.out-$pid";
  system "$cmd >> fred_movie.out-$pid";
  system "date >> fred_movie.out-$pid";
  $outfile = "gaia_input_$filebase.png" if $type eq "static";
  $outfile = "gaia_input_$filebase.$movformat" if $type eq "animated";
  system "rm -f gaia*.txt out.xml";
  print "$dir/$outfile\n";
}
else {
  my $logfile = "fred_movie.out-$pid";
  system "date > $logfile";
  $cmd = "$FRED/bin/fred_make_map_sequence -k $key -v $variable -T '$title'";
  if ($agents) { $cmd .= " --agents"; }
  if ($upper > 0) { $cmd .= " -u $upper"; }
  $dir = `$cmd`;
  chomp $dir;
  system "echo MAPS directory = $dir >> $logfile";
  system "date >> $logfile";
  system "echo $FRED/bin/fred_movie_from_map_sequence -d $dir >> $logfile";
  system "$FRED/bin/fred_movie_from_map_sequence -d $dir";
  $outfile = "fred_movie-KEY=$key-VAR=$variable\.mov";
  system "mv $dir/fred.mov $reportsdir/$outfile";
  system "echo $reportsdir/$outfile >> $logfile";
  system "date >> $logfile";
  system "rm -f $dir/MAPS/map-*";
  print "$reportsdir/$outfile\n";
}

exit;


