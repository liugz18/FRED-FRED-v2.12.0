#!/usr/bin/perl
use strict;
use warnings;
use Env;
use Getopt::Std;

# File: fred_sa
# Author: John Grefenstette
# Created: Nov 17, 2014

my $FRED = $ENV{FRED_HOME};
die "$0: Please set environmental variable FRED_HOME to location of FRED home directory\n" if not $FRED;

my $FREDRESULTS = $ENV{FRED_RESULTS};
$FREDRESULTS = "$ENV{FRED_HOME}/RESULTS" if not $FREDRESULTS;

my $usage = "usage: $0 [-f config_file | -h | -s ]\n";

# get command line arguments
my %options = ();
getopts("hsf:", \%options);
if (exists $options{h}) {
  print "$usage";
  print "Try:\n$0 -s\nto get a sample configuration file.\n";
  exit;
}

# print sample file and exit if given -s
if (exists $options{s}) {
  print_sample_file();
  exit;
}

# read config file
my $config_file = $options{f};
die $usage if (not $config_file) or (not -e $config_file);
open FH, $config_file or die "Can't open $config_file\n";
my $line;

# find the title line
get_next_line();
$line =~ /FRED Sensitivity Analysis Title:/ or die "Bad title line format\n";
my ($title) = $line =~ /Title:\s*(.*)/;
die "Bad title format\n" if not $title;
$title =~ s/\s/_/g;

# create baseline params file
my $saparams = "params_sa.$title";
open PAR, ">$saparams";
print PAR "# Sensitivity Analysis Title: $title\n";
print PAR "# Created: ", scalar localtime, "\n\n";

# get the fixed parameters
get_next_line();
$line =~ /Fixed Parameters:/ or die "Bad fixed title format\n";
print PAR "# Fixed Parameters:\n";
get_next_line();
while ($line !~ /Variable Parameters:/) {
  print PAR "$line\n";
  get_next_line();
}

# get the variable parameters
my @names = ();
my @refs = ();
my @hi_vals = ();
my @lo_vals = ();
my $name;
print PAR "\n\n# Variable Parameters:\n";
get_next_line();
while ($line !~ /Output Variables:/) {
  my $hi_val;
  my $lo_val;
  my ($name, $val, $high) = $line =~ /(\S.*\S)\s*=\s*(\S.*\S)\s*,\s*(\S.*\S)/;
  if ($high =~ /\%/) {
    my ($pct) = $high =~ /(.*)\%/;
    $hi_val = (1.0 + 0.01 * ($pct)) * $val; 
    $lo_val = (1.0 - 0.01 * ($pct)) * $val; 
    if ($high =~ /\%i/) {
      $hi_val = int($hi_val + 0.5);
      $lo_val = int($lo_val - 0.5);
    }
  }
  else {
    $hi_val = $val + $high;
    $hi_val = $val - $high;
  }
  push @names, $name;
  push @refs, $val;
  push @hi_vals, $hi_val;
  push @lo_vals, $lo_val;
  print PAR "$name = $val\n";
  get_next_line();
  # print "line = |$line|\n";
}
close PAR;

# create parameter files for each variable parameter
my @parfiles = ();
my @values = @hi_vals;
for $name (@names) {
  my $hi = shift @values;
  my $paramsfile = "params_sa.$title-$name-up";
  system "cp $saparams $paramsfile";
  system "fred_set \'$name\' $hi $paramsfile";
  push @parfiles, $paramsfile;
}

my @lo_values = @lo_vals;
for $name (@names) {
  my $lo = shift @lo_values;
  my $paramsfile = "params_sa.$title-$name-dn";
  system "cp $saparams $paramsfile";
  system "fred_set \'$name\' $lo $paramsfile";
  push @parfiles, $paramsfile;
}

# get the output variables
my @outvars = ();
while ($line = <FH>) {
  chomp $line;
  push @outvars, $line if $line;
  # print "outvars = |@outvars|\n";
}
# print "@outvars\n";
close FH;

# make script to run sensitivity analysis
my $fred_sensitivity = "run_fred_sensitivity.$title";
open EXEC, ">$fred_sensitivity";
my $date = scalar localtime;
my $n = 10;
my $m = 10;
print EXEC <<EOF;
#!/usr/bin/perl
# File: $fred_sensitivity
# Created: $date
print scalar localtime, "\\n";
system 'echo fred_delete -f -k $saparams';
system 'fred_delete -f -k $saparams';
system 'echo fred_job -k $saparams -p $saparams -n $n -m $m';
system 'fred_job -k $saparams -p $saparams -n $n -m $m';
my \%base_results = ();
open OUT, ">$saparams.out";
EOF

for my $out (@outvars) {
  print EXEC <<EOF2;
my \$out = \"$out\";
my \$results = `fred_csv -k $saparams -v \$out | tail -1 | awk -F ',' '{print \\\$9, \\\$10}' `;
chomp \$results;
my (\$basemean, \$basestd) = split \" \", \$results;
\$base_results{\$out} = \$basemean;  
EOF2

  for $name (@names) {
    my $ref = shift @refs;
    my $hi = shift @hi_vals;
    my $key = "params_sa.$title-$name-up";
    print EXEC<<EOF3;
print scalar localtime, "\\n";
system "echo fred_delete -f -k $key";
system "fred_delete -f -k $key";
system "echo fred_job -k $key -p $key -n $n -m $m";
system "fred_job -k $key -p $key -n $n -m $m";
\$results = `fred_csv -k $key -v \$out | tail -1 | awk -F ',' '{print \\\$9, \\\$10}' `;
chomp \$results;
my (\$mean, \$std) = split \" \", \$results;
my \$Z = (\$mean - \$basemean)/\$basestd;
printf OUT "param = $name ref = $ref hi = $hi output = \$out base-mean = \$basemean base-std = \%0.5f mean = \$mean std = \%0.5f Z = \%0.2f\\n", \$basestd, \$std, \$Z;
EOF3
    my $lo = shift @lo_vals;
    $key = "params_sa.$title-$name-dn";
    print EXEC<<EOF4;
print scalar localtime, "\\n";
system "echo fred_delete -f -k $key";
system "fred_delete -f -k $key";
system "echo fred_job -k $key -p $key -n $n -m $m";
system "fred_job -k $key -p $key -n $n -m $m";
\$results = `fred_csv -k $key -v \$out | tail -1 | awk -F ',' '{print \\\$9, \\\$10}' `;
chomp \$results;
my (\$mean, \$std) = split \" \", \$results;
my \$Z = (\$mean - \$basemean)/\$basestd;
printf OUT "param = $name ref = $ref low = $lo output = \$out base-mean = \$basemean base-std = \%0.5f mean = \$mean std = \%0.5f Z = \%0.2f\\n", \$basestd, \$std, \$Z;
EOF4
  }
}
print EXEC "print scalar localtime, '\n';\n";
print EXEC "close OUT;\n";
print EXEC "exit;\n";
close EXEC;

# run script
system "chmod +x $fred_sensitivity";
system "$fred_sensitivity >& fred_sensitivity.out";
exit;


sub get_next_line {
  $line = "";
  while (not $line) {
    $line = <FH>; 
    return $line if not defined $line;
    chomp $line;
    $line = "" if $line =~ /^#/;
  }
}


sub print_sample_file {
  print <<EOF;
################################################# 
# Sample FRED Sensitivity Analysis config file
#
# Lines that starts with # are ignored.
#
FRED Sensitivity Analysis Title: baseline

Fixed Parameters:
R0 = 1.5
days = 100

Variable Parameters:
sick_day_prob = 0.5, 5%
influenza_symp = 0.67, 5%
weekend_contact_rate = 1.5, 5%
school_classroom_size = 40, 5%
office_size = 50, 5%i

Output Variables:
AR

EOF
}
