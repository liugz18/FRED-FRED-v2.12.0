#!/usr/bin/perl
use strict;
use warnings;
use Env;
use Getopt::Long qw(:config no_ignore_case bundling);

# use default api_key if it exists
my $api_key = $ENV{FRED_API_KEY};
$api_key = "none" if not $api_key;
# print "api_key = '$api_key'\n";

my $census_tracts = 0;
my $country = "usa";
my $disease_id = 0;
my $play = 0;
my $filled = 0;
my $help = 0;
my $grid = 0;
my $key = "";
my $max = 0;
my $parallelism = 10;
my $run = 1;
my $term = "png";
my $title = "FRED Simulation";
my $subtitle = " ";
my $lightness = 0;
my $show_all_households = 0;
my $show_incidence = 0;
my $show_infectious = 1;
my $show_recovered = 1;
my $show_hc_unav = 0;
my $show_hc_deficit = 0;
my $show_primary_hc_unav = 0;
my $show_accept_insr_hc_unav = 0;
my $movie_format = "mp4";
my $moviefile = "";
my $linewidth = 2;
my $xmin = 0;
my $xmax = 0;
my $ymin = 0;
my $ymax = 0;
my $border = 0;
my $start = 0;
my $finish = 0;
my $interval = 1;
my $google = 1;
my $shapefile = 1;
my $point_size = 0.5;
my $hazel = 0;
my $case_fatalities = 0;
my $total_case_fatalities = 0;

my $opt_result = GetOptions(
			    "api_key=s" => \$api_key,
			    "border=i" => \$border,
			    "start=i" => \$start,
			    "interval=i" => \$interval,
			    "census_tracts" => \$census_tracts,
			    "cf=i" => \$case_fatalities,
			    "tcf=i" => \$total_case_fatalities,
			    "country=s" => \$country,
			    "disease=i" => \$disease_id,
			    "d=i" => \$disease_id,
			    "display=i" => \$play,
			    "play=i" => \$play,
			    "p=i" => \$play,
			    "filled=i" => \$filled,
			    "finish=i" => \$finish,
			    "google=i" => \$google,
			    "grid=i" => \$grid,
			    "h" => \$help,
			    "help" => \$help,
			    "k=s" => \$key,
			    "key=s" => \$key,
			    "lightness=i" => \$lightness,
			    "max=f" => \$max,
			    "out=s" => \$moviefile,
			    "o=s" => \$moviefile,
			    "parallelism=i" => \$parallelism,
			    "point_size=f" => \$point_size,
			    "run=i" => \$run,
			    "term=s" => \$term,
			    "title=s" => \$title,
			    "subtitle=s" => \$subtitle,
			    "households=i" => \$show_all_households,
			    "incidence=i" => \$show_incidence,
			    "infectious=i" => \$show_infectious,
			    "recovered=i" => \$show_recovered,
			    "hc_unav=i" => \$show_hc_unav,
			    "hc_deficit=i"=>\$show_hc_deficit,
			    "primary_hc_unav=i" => \$show_primary_hc_unav,
			    "accept_insr_hc_unav=i" => \$show_accept_insr_hc_unav,
			    "shapefile=i" => \$shapefile,
			    "movieformat=s" => \$movie_format,
			    "hazel=i" => \$hazel,
			    "lw=f" => \$linewidth,
			    "x=f" => \$xmin,
			    "X=f" => \$xmax,
			    "y=f" => \$ymin,
			    "Y=f" => \$ymax,
			   );

my $usage = <<EOH;
usage: $0 [ options ], where options include [default values]
  --api_key <key>: if set, use this api_key to obtain Google maps ["none"]
  --border 0/1: if set, display border around map with lat-lon labels [0]
  --census_tracts 0/1: plot census tracts [0]
  --cf 0/1: plot daily case_fatalities [0]
  --country <name> : plot the named country [usa]
  --disease <id> : plot results for the disease id [0]
  --filled <0/1>:  if set, plot filled curves [0]
  --google : if set, use a google map as a background image [1]
  --grid <0/1>: if set, show grid. [0]
  --help: print this help message
  --households <0/1> : plot all households [0]
  --incidence <0/1> : if set and dots is set, plot households with incidence [0]
  --infectious <0/1> : if set and dots is set, plot households with infectious members [1]
  --interval <n> : movie include every nth day [1] 
  --key <id> : plot the job with given id [none - must be specified]
  --lightness <n> : set lightness of background map [0]
  --lw <n> : use linewidth n to outline counties [2]
  --max <val> : use the given value as the maximum for color plots [10]
  --movie_format <str> : use the specified movie format [mp4]
  --parallelism <n> : plot n maps in parallel [10]
  --play <0/1> : if set, play the movie after it is made [0]
  --point_size <n> : plot dots using point size [0.5]
  --recovered <0/1> :  if set and dots is set, plot households with recovered members [1]
  --hc_unav <0/1> : plot all households with health care unavailable[0]
  --primary_hc_unav <0/1> : plot all households with primary health care unavailable [0]
  --accept_insr_hc_unav <0/1> : plot all households with health care accepting their insurance unavailable [0] 
  --hazel <0/1> make hazel specific maps [0]
  --run <n> : plot results of run n [1]
  --shapefile <0/1> : if set, draw the shapefile for each fips code
  --start day: start movie on specified day [0]
  --subtitle <str> : subtitle for each map [" "]
  --tcf 0/1: plot total case_fatalities [0]
  --term <type> : plot using the specified terminal type [png]
  --title <str> : title for each map ["FRED Simulation"]
  -x <xmin> : min value for x axis 
  -X <xmax> : max value for x axis 
  -y <ymin> : min value for y axis
  -Y <xmax> : max value for x axis
EOH

die $usage if $help;
die $usage if not $key;

my $FRED = $ENV{FRED_HOME};
die "$0: Please set environmental variable FRED_HOME to location of FRED home directory\n" if not $FRED;

my $FREDRESULTS = $ENV{FRED_RESULTS};
$FREDRESULTS = "$ENV{FRED_HOME}/RESULTS" if not $FREDRESULTS;

my $cwd = `pwd`;
chomp $cwd;

my $bindir = "$FRED/bin";
my $id = `$bindir/fred_id $key`;
chomp $id;
die "$0: UNKNOWN key: $key\n" if $id eq "UNKNOWN";

my $outdir = "$FREDRESULTS/JOB/$id/DATA/OUT";
chdir $outdir;

my $command = "fred_make_maps --api_key $api_key --census_tracts $census_tracts --country $country --disease $disease_id --filled $filled --key $key --max $max --parallelism $parallelism --run $run --term $term --title '$title' --subtitle '$subtitle' --households $show_all_households --incidence $show_incidence --infectious $show_infectious --recovered $show_recovered --hc_unav $show_hc_unav --hc_deficit $show_hc_deficit --primary_hc_unav $show_primary_hc_unav --accept_insr_hc_unav $show_accept_insr_hc_unav --hazel $hazel --lw $linewidth -x $xmin -X $xmax -y $ymin -Y $ymax --grid $grid --border $border --start $start --interval $interval --google $google --shapefile $shapefile --lightness $lightness --point_size $point_size --finish $finish --cf $case_fatalities --tcf $total_case_fatalities";

print "$command\n"; 
# exit;

system $command;
chdir "VIS/run$run/dis$disease_id/MAPS";
# system "pwd";
# system "ls -l map*";
# exit;
$moviefile = "$key" if $moviefile eq "";
$moviefile = "$cwd/$moviefile.$movie_format";
if (-s "FIPS") {
  # print "ffmpeg -r 3 -i map\%04d.png -c:v libx264 -r 30 -pix_fmt yuv420p movie.$movie_format -y -loglevel quiet\n";
  system "ffmpeg -r 3 -i map\%04d.png -c:v libx264 -r 30 -pix_fmt yuv420p movie.$movie_format -y -loglevel quiet";
  # system "ffmpeg -r 3 -i map\%04d.pdf -c:v libx264 -r 30 -pix_fmt yuv420p movie.$movie_format -y";
  # print "cp movie.$movie_format $cwd/$key.$movie_format\n";
  system "cp movie.$movie_format $moviefile";
  chdir $cwd;
  # system "ls -l $key.$movie_format";
  system "open $moviefile" if $play;
}
else {
  die "$0: map data not found\n";
}

