#!/usr/bin/perl
use strict;
use warnings;
use Env;
use Cwd;
use Fcntl qw(:flock);
use Getopt::Long qw(:config no_ignore_case bundling);
use POSIX qw/ceil/;
$| = 1;  # AUTO_FLUSH

#####################################
#
# File: fred_combine_job
# Author: John Grefenstette
# Created: Dec 11, 2012

# get current working directory
my $cwd = getcwd();

my $FRED = $ENV{FRED_HOME};
die "$0: Please set environmental variable FRED_HOME to location of FRED home directory\n" if not $FRED;

my $FREDRESULTS = $ENV{FRED_RESULTS};
$FREDRESULTS = "$ENV{FRED_HOME}/RESULTS" if not $FREDRESULTS;

my $usage = "usage: $0 -o newkey [ -h | -k key [ -k key ... ]]\n";
my $help = "";
my @keylist = ();
my $newkey = "";
my $key = "";
my $base = "";
my $start = 1;
my $N = 0;
my $opt_result = GetOptions(
			    "h" => \$help,
			    "o=s" => \$newkey,
			    "k=s" => \@keylist,
			    "keys=s" => \@keylist,
			    "base=s" => \$base,
			    "s=i" => \$start,
			    "N=i" => \$N,
			   );
die $usage if $help;

if ($base) {
  die "$0: Help! N = $N < start = $start\n" if $N < $start;
  @keylist = ();
  for (my $i = $start; $i <= $N; $i++) {
    push @keylist, "$base-$i";
  }
}

my $fred_results = "$FREDRESULTS";
if (not -d $fred_results) {
  die "$0: Can't find RESULTS directory $fred_results\n";
}

# set locking semaphore
my $SEMAPHORE = ".results.lck";
open(SEM, ">$SEMAPHORE") || die "$0 failed to obtain semaphore: ($!)\n";
flock(SEM, LOCK_EX);

# determine if newkey is unique. if not, terminate
open FH, "$fred_results/KEY";
while (<FH>) {
  chomp;
  my ($k, $i) = split;
  if ($k eq $newkey) {
    close SEM and close FH and die "$0: key $newkey already used.\n";
  }
}
close FH;
# get id for this experiment and update counter
open FH, "$fred_results/ID";
my $id = <FH>;
chomp $id;
# print "id = |$id|\n";
close FH;
my $new_id = $id + 1;
open FH, ">$fred_results/ID";
print FH "$new_id\n";
close FH;
# add key-id pair
`echo $newkey $id >> $fred_results/KEY`;
# release semaphore
close SEM;

# make directory for combined job
my $dir = "$fred_results/JOB/$id";
die "$0: ID $id already used\n" if -d $dir;
mkdir $dir or die "$0: Can't make directory $dir\n";

# return run_key association
print "$newkey $id\n";

# make working directory
my $work = "$dir/WORK";
mkdir $work or die "$0: Can't make directory $work\n";

# make directories for output
my $data = "$dir/DATA";
mkdir $data or die "$0: Can't make directory $data\n";

my $out = "$data/OUT";
mkdir $out or die "$0: Can't make directory $out\n";

my $tables = "$data/TABLES";
mkdir $tables or die "$0: Can't make directory $tables\n";

my $reports = "$data/REPORTS";
mkdir $reports or die "$0: Can't make directory $reports\n";

# record meta data about this run
my $meta = "$dir/META";
mkdir $meta or die "$0: Can't make directory $meta\n";

# update job status
`echo SETUP > $meta/STATUS`;
my $t = localtime();
`echo $t > $meta/START`;

# record the KEY
`echo $newkey > $meta/KEY`;

# record the time and date
`date > $meta/DATE`; 

# record the user
`echo $ENV{USER} > $meta/USER`;

# record the host
`hostname > $meta/WHERE`;

# make list of OUT directories to combine
my @outdirs = ();
for my $key (@keylist) {
  my $dir = `fred_cd -k $key`;
  chomp $dir;
  $dir =~ s/^cd //;
  # print "$key $dir\n";
  push @outdirs, $dir;
}
# print "@outdirs\n";

my $run = 0;
while (my $out = shift @outdirs) {

  # get the outfiles
  my $filelist = `ls $out/out*`;
  chomp $filelist;
  my @outfiles = split " ", $filelist;
  # print "|@outfiles|\n";

  # the list of plottable variables
  my %vars = ();

  for my $file (@outfiles) {
    # print "$file\n";
    open FH, $file or die "Can't open file $file\n";
    ## my ($run) = ($file =~/(\d+)\.txt/);
    $run++;
    # print "run = $run\n";
    my $first = 1;
    my %created = ();

    while (<FH>) {
      chomp;
      my %hash = split " ";
      my $day = $hash{Day};
      my $week = $hash{Week};
      my $year = $hash{Year};
      my $n = $hash{N};
      my $str = $hash{Str};
      my $date = $hash{Date};

      # make STRAIN directory if needed
      my $dir = "$tables/$str";
      mkdir $dir if not -e $dir;
      exit if not -d $dir;

      # print "$day $week $year $n\n";
      for my $key (keys %hash) {
	next if $key eq "Day";
	next if $key eq "Week";
	next if $key eq "Year";
	next if $key eq "N";
	next if $key eq "Wkday";
	next if $key eq "Date";
	next if $key eq "Str";
	$vars{$key} = 1;
	my $tfile = "$dir/$key\_tmp-$run.txt";
	unlink $tfile if (-e $tfile and $first);
	open OUT, ">>$tfile";
	print OUT "DAY WEEK YEAR DATE POP $key\n" if $first;
	print OUT "$day $week $year $date $n $hash{$key}\n";
	close OUT;
      }
      $first = 0;
    }
    close FH;
    get_tables($run, %vars);
  }
}

sub get_tables {
  my ($run, %vars) = @_;
  for my $key (sort keys %vars) {
    # loop over all strains
    my $strain = 0;
    my $dir = "$tables/$strain";
    while (-d $dir) {
      my $tfile = "$dir/$key\_tmp-$run.txt";
      open IN, "$tfile" or die "Can't open tfile\n";
      my $wfile = "$dir/$key\_weekly-$run.txt";
      open WEEK, ">$wfile";
      print WEEK "SIMWEEK $key POP DATE WEEK YEAR WKDAYS\n";

      my $dfile = "$dir/$key\_daily-$run.txt";
      open DAY, ">$dfile";
      print DAY "DAY $key POP DATE WEEK YEAR\n";
      
      my $sum = 0;
      my $size = 0;
      my $lineno = 1;
      my $oldweek = -1;
      my $oldyear = -1;
      my $day;
      my $week;
      my $year;
      my $n;
      my $x;
      my $date;
      $x = <IN>;
      while (<IN>) {
	chomp;
	($day, $week, $year, $date, $n, $x) = split " ";
	print DAY "$day $x $n $date $week $year\n";
	if ($week ne $oldweek) {
	  if ($size > 0) {
	    print WEEK "$lineno $sum $n $date $oldweek $oldyear $size \n";
	    $lineno++;
	  }
	  $sum = $x;
	  $size = 1;
	  $oldweek = $week;
	  $oldyear = $year;
	} 
	else {
	  $sum = $sum + $x;
	  $size++;
	}
      }
      close IN;
      print WEEK "$lineno $sum $n $date $oldweek $oldyear $size \n";
      close WEEK;
      unlink $tfile;
      $strain++;
      $dir = "$tables/$strain";
    }
  }
}

# process tables

# get the list of files
my $filelist = `ls $tables/0/*_daily*`;
chomp $filelist;
my @files = split " ", $filelist;
# print "|@files|\n";

# get the list of variables
my %vars = ();
for my $file (@files) {
  my ($var) = ($file =~/.*\/(.*)_daily-\d+\.txt/);
  $vars{$var} = 1;
}

for my $key (sort keys %vars) {
  # loop over all strains
  my $strain = 0;
  my $dir = "$tables/$strain";
  while (-d $dir) {
    system "$FRED/bin/fred_get_stats $dir/$key\_daily-*.txt > $reports/$key\_daily-$strain.dat";
    system "$FRED/bin/fred_get_stats $dir/$key\_weekly-*.txt > $reports/$key\_weekly-$strain.dat";
    $strain++;
    $dir = "$tables/$strain";
  }
}
# update run status
`echo FINISHED > $meta/STATUS`;
$t = localtime();
`echo $t > $meta/FINISHED`;

exit;

