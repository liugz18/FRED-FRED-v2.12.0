#!/usr/bin/perl
use strict;
use warnings;
use Env;
use Getopt::Long qw(:config no_ignore_case bundling);

my $FRED = $ENV{FRED_HOME};
die "$0: Please set environmental variable FRED_HOME to location of FRED home directory\n" if not $FRED;

my $FREDRESULTS = $ENV{FRED_RESULTS};
$FREDRESULTS = "$ENV{FRED_HOME}/RESULTS" if not $FREDRESULTS;

my $help = "";
my $key = "";
my $title = "FRED: Allegheny County Model";
my $variable = "C";
my $days = "";
my $state = 0;
my $upper = 0;
my $agents = "";
my $opt_result = GetOptions(
			    "a" => \$agents,
			    "agents" => \$agents,
			    "help" => \$help,
			    "h" => \$help,
			    "k=s" => \$key,
			    "key=s" => \$key,
			    "s" => \$state,
			    "state" => \$state,
			    "T=s" => \$title,
			    "Title=s" => \$title,
			    "title=s" => \$title,
			    "v=s" => \$variable,
			    "variable=s" => \$variable,
			    "upper=s" => \$upper,
			    "u=s" => \$upper,
);
# find directory
my $bindir = "$FRED/bin";
my $id = `$bindir/fred_id $key`;
chomp $id;
die "$0: UNKNOWN key: $key\n" if $id eq "UNKNOWN";

my $status = `$bindir/fred_status -k $key`;
chomp $status;
$status =~ s/\s.*//;
die "$0: bad status: $status\n" if $status ne "FINISHED";

my $dir = "$FREDRESULTS/JOB/$id/DATA/OUT/VIS/run1/dis0/$variable";
die "$0: can't find data directory $dir\n" if not -d $dir;

# change to working directory
chdir $dir;
my $pwd = `pwd`;
chomp $pwd;

# find the number of days
if ($agents) {
  $days = `ls household* | wc -l`;
  chomp $days;
}
else {
  $days = `ls census* | wc -l`;
}

# find the fips code
my $fips = `cat $FREDRESULTS/JOB/$id/META/FIPS`;
chomp $fips;
system "echo $fips > FIPS";

# compute max value
$upper = 1 if $agents;
if ($upper > 0) {
  system "echo $upper > max";
}
else {
  system "awk '(\$2 != \"Count\"){print \$2}' census* | sort -rn | head -1 > max";
}
system "echo $title > TITLE";

# make the individual files
my $day = 1;
while ($day <= $days) {
  for my $i (1..10) {
    if (fork() == 0) {
      # print "making map $day/$days\n";
      if ($agents) {
	exec "Rscript $FRED/bin/fred_map_agents.R $pwd $day >& /dev/null";
      }
      else {
	exec "Rscript $FRED/bin/fred_make_map.R $pwd $fips $day >& /dev/null";
      }
    }
    $day++;
    last if ($day > $days);
  }
  # wait for all child processes to finish from current set
  while (wait() != -1) {}
}
print "$pwd/MAPS\n";



