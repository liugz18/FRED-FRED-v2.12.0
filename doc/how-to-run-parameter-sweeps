
This document shows how to use FRED scripts to run parameter sweeps.

1. Create a parameter file to include parameters that are common to all
runs. There is no need to include parameters with default values, but
this doesn't cause any problems either.  You might want to call this
file params.base, to remind yourself that is in the base for the
parameter sweep. Example:

% cat params.base
days = 100
fips = 42003
R0 = 1.5
rotate_start_date = 1
report_age_of_infection = 1

2. Create a configuration files that names the base params file and
specifies the values for the sweep parameters.  You can get a sample
config file by running fred_make_params with the "-s" option:

% fred_make_params -s
################################################# 
# Sample fred_make_params config file
# Lines that starts with # are ignored.
#
Baseline Parameter File: params.base

Sweep Parameters:
# the following illustrates a loop using min, max and increment:
# name: R0 min: 1.0 max: 2.5 inc: 0.5  format: %0.1f
#
# the following uses a comma-separated list of values,
# which may be strings (with no spaces)
# name: Weeks values: [0, 1, 2, 4, 6, 8]
#
# the following read in a file of values, one per line
# name: test file: my_test_values.txt
#
name: R0 min: 1.0 max: 2.5 inc: 0.5  format: %0.1f
name: fips values: [42003, 42065]

The file above asks for 8 jobs that include all combinations of the four
values for R0 and the two values for fips.  Let's assume that you save
this file as "config" and edit it to you needs.

3. Create the individual parameter files by running fred_make_params on
the config file:

% fred_make_params -f config

This will create 8 parameter files in the directory PARAMDIR (creating
it if necessary).  The values of the sweep parameters are included in
the parameter file name:

% fred_make_params -f config
% l PARAMDIR/
total 64
-rw-r--r--  1 gref  staff  83 Feb 11 10:49 params.R0=1.0-fips=42003
-rw-r--r--  1 gref  staff  83 Feb 11 10:49 params.R0=1.0-fips=42065
-rw-r--r--  1 gref  staff  83 Feb 11 10:49 params.R0=1.5-fips=42003
-rw-r--r--  1 gref  staff  83 Feb 11 10:49 params.R0=1.5-fips=42065
-rw-r--r--  1 gref  staff  83 Feb 11 10:49 params.R0=2.0-fips=42003
-rw-r--r--  1 gref  staff  83 Feb 11 10:49 params.R0=2.0-fips=42065
-rw-r--r--  1 gref  staff  83 Feb 11 10:49 params.R0=2.5-fips=42003
-rw-r--r--  1 gref  staff  83 Feb 11 10:49 params.R0=2.5-fips=42065

4. Create a list of tasks, one for each parameter file.  This will
create 8 task files in the directory TASKDIR (creating it if necessary).
Each task runs a fred_job using the same key names as in the parameter
file names:

% fred_make_tasks

% l TASKDIR/
total 64
-rwxr-xr-x  1 gref  staff  300 Feb 11 10:55 task.R0=1.0-fips=42003
-rwxr-xr-x  1 gref  staff  300 Feb 11 10:55 task.R0=1.0-fips=42065
-rwxr-xr-x  1 gref  staff  300 Feb 11 10:55 task.R0=1.5-fips=42003
-rwxr-xr-x  1 gref  staff  300 Feb 11 10:55 task.R0=1.5-fips=42065
-rwxr-xr-x  1 gref  staff  300 Feb 11 10:55 task.R0=2.0-fips=42003
-rwxr-xr-x  1 gref  staff  300 Feb 11 10:55 task.R0=2.0-fips=42065
-rwxr-xr-x  1 gref  staff  300 Feb 11 10:55 task.R0=2.5-fips=42003
-rwxr-xr-x  1 gref  staff  300 Feb 11 10:55 task.R0=2.5-fips=42065

Each tasks is a small script that runs an individual fred_job, along
with any desired setup or cleanup orocessing:

% cat TASKDIR/task.R0=2.0-fips=42065

#!/bin/csh -f
echo -n "task.R0=2.0-fips=42065 STARTED "
date
fred_delete -f -k R0=2.0-fips=42065
fred_job -k R0=2.0-fips=42065 -p PARAMDIR/params.R0=2.0-fips=42065 -n 20 -m 1
if ( -e collect_task_data ) then
./collect_task_data R0=2.0-fips=42065
endif
echo -n "task.R0=2.0-fips=42065 FINISHED "
date


The fred_make_tasks script also creates an executable file called
"tasks" that can be used to run the individual tasks:

% cat tasks
TASKDIR/task.R0=1.0-fips=42003 > TASKDIR/task.R0=1.0-fips=42003.out
TASKDIR/task.R0=1.0-fips=42065 > TASKDIR/task.R0=1.0-fips=42065.out
TASKDIR/task.R0=1.5-fips=42003 > TASKDIR/task.R0=1.5-fips=42003.out
TASKDIR/task.R0=1.5-fips=42065 > TASKDIR/task.R0=1.5-fips=42065.out
TASKDIR/task.R0=2.0-fips=42003 > TASKDIR/task.R0=2.0-fips=42003.out
TASKDIR/task.R0=2.0-fips=42065 > TASKDIR/task.R0=2.0-fips=42065.out
TASKDIR/task.R0=2.5-fips=42003 > TASKDIR/task.R0=2.5-fips=42003.out
TASKDIR/task.R0=2.5-fips=42065 > TASKDIR/task.R0=2.5-fips=42065.out

5. Run the tasks:

% tasks &

6. Go get some coffee while FRED runs through the tasks.

======================================================================

Options:

% fred_make_tasks [--help][-k keybase][-n runs][-m simultaneous_runs][-o outfile][-r results_dir][-d delete][other options]
  --help	  print out this help message.
  -d <int>	  if set, run fred_delete before each job to clear previous results.
     		  if -d 2, also run fred_delete after running collect_task_data.
  -k or --key	  base of fred_key. The sweep parameters are appended to this to get the FRED key.
  -m <int>	  the number of simulatenous runs to allow (default = 1)
  -M <int>	  when running under pbs, allocate this many cpus to each jobs. (default = 1)
  -n <int>   	  the number of simulation replications to run (default = 20)
  -o outfile	  the name of the tasks file. (default = tasks).
  -r results_dir  the location of the RESULTS directory.
  --threads <int> the number of threads to use for each job (default = 1)


